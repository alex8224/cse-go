// 指定使用 proto3 语法

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pkg/api/v1/cse.proto

// 定义包名，这会映射到 Go 语言的包名

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComponentService_ExecuteCommand_FullMethodName = "/v1.ComponentService/ExecuteCommand"
	ComponentService_GetMetadata_FullMethodName    = "/v1.ComponentService/GetMetadata"
	ComponentService_GetStatus_FullMethodName      = "/v1.ComponentService/GetStatus"
	ComponentService_Shutdown_FullMethodName       = "/v1.ComponentService/Shutdown"
)

// ComponentServiceClient is the client API for ComponentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -----------------------------------------------------------------------------
// ComponentService: 由各功能组件实现，供主应用程序调用
// -----------------------------------------------------------------------------
type ComponentServiceClient interface {
	// 执行一个命令
	ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error)
	// 获取组件的元数据信息
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*ComponentMetadata, error)
	// 获取组件当前的健康状态
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// 请求组件优雅地关闭
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type componentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentServiceClient(cc grpc.ClientConnInterface) ComponentServiceClient {
	return &componentServiceClient{cc}
}

func (c *componentServiceClient) ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteCommandResponse)
	err := c.cc.Invoke(ctx, ComponentService_ExecuteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*ComponentMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentMetadata)
	err := c.cc.Invoke(ctx, ComponentService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, ComponentService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, ComponentService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServiceServer is the server API for ComponentService service.
// All implementations must embed UnimplementedComponentServiceServer
// for forward compatibility.
//
// -----------------------------------------------------------------------------
// ComponentService: 由各功能组件实现，供主应用程序调用
// -----------------------------------------------------------------------------
type ComponentServiceServer interface {
	// 执行一个命令
	ExecuteCommand(context.Context, *ExecuteCommandRequest) (*ExecuteCommandResponse, error)
	// 获取组件的元数据信息
	GetMetadata(context.Context, *GetMetadataRequest) (*ComponentMetadata, error)
	// 获取组件当前的健康状态
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// 请求组件优雅地关闭
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedComponentServiceServer()
}

// UnimplementedComponentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComponentServiceServer struct{}

func (UnimplementedComponentServiceServer) ExecuteCommand(context.Context, *ExecuteCommandRequest) (*ExecuteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedComponentServiceServer) GetMetadata(context.Context, *GetMetadataRequest) (*ComponentMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedComponentServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedComponentServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedComponentServiceServer) mustEmbedUnimplementedComponentServiceServer() {}
func (UnimplementedComponentServiceServer) testEmbeddedByValue()                          {}

// UnsafeComponentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServiceServer will
// result in compilation errors.
type UnsafeComponentServiceServer interface {
	mustEmbedUnimplementedComponentServiceServer()
}

func RegisterComponentServiceServer(s grpc.ServiceRegistrar, srv ComponentServiceServer) {
	// If the following call pancis, it indicates UnimplementedComponentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComponentService_ServiceDesc, srv)
}

func _ComponentService_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentService_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).ExecuteCommand(ctx, req.(*ExecuteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentService_ServiceDesc is the grpc.ServiceDesc for ComponentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ComponentService",
	HandlerType: (*ComponentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _ComponentService_ExecuteCommand_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ComponentService_GetMetadata_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ComponentService_GetStatus_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ComponentService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/cse.proto",
}

const (
	UpdaterNotificationService_NotifyUpdateAvailable_FullMethodName = "/v1.UpdaterNotificationService/NotifyUpdateAvailable"
	UpdaterNotificationService_GetComponentVersion_FullMethodName   = "/v1.UpdaterNotificationService/GetComponentVersion"
)

// UpdaterNotificationServiceClient is the client API for UpdaterNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -----------------------------------------------------------------------------
// UpdaterNotificationService: 由主应用程序实现，供 cse-updater 调用
// -----------------------------------------------------------------------------
type UpdaterNotificationServiceClient interface {
	NotifyUpdateAvailable(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error)
	GetComponentVersion(ctx context.Context, in *ComponentVersionRequest, opts ...grpc.CallOption) (*ComponentVersionResponse, error)
}

type updaterNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdaterNotificationServiceClient(cc grpc.ClientConnInterface) UpdaterNotificationServiceClient {
	return &updaterNotificationServiceClient{cc}
}

func (c *updaterNotificationServiceClient) NotifyUpdateAvailable(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationResponse)
	err := c.cc.Invoke(ctx, UpdaterNotificationService_NotifyUpdateAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updaterNotificationServiceClient) GetComponentVersion(ctx context.Context, in *ComponentVersionRequest, opts ...grpc.CallOption) (*ComponentVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentVersionResponse)
	err := c.cc.Invoke(ctx, UpdaterNotificationService_GetComponentVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdaterNotificationServiceServer is the server API for UpdaterNotificationService service.
// All implementations must embed UnimplementedUpdaterNotificationServiceServer
// for forward compatibility.
//
// -----------------------------------------------------------------------------
// UpdaterNotificationService: 由主应用程序实现，供 cse-updater 调用
// -----------------------------------------------------------------------------
type UpdaterNotificationServiceServer interface {
	NotifyUpdateAvailable(context.Context, *UpdateNotificationRequest) (*UpdateNotificationResponse, error)
	GetComponentVersion(context.Context, *ComponentVersionRequest) (*ComponentVersionResponse, error)
	mustEmbedUnimplementedUpdaterNotificationServiceServer()
}

// UnimplementedUpdaterNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpdaterNotificationServiceServer struct{}

func (UnimplementedUpdaterNotificationServiceServer) NotifyUpdateAvailable(context.Context, *UpdateNotificationRequest) (*UpdateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUpdateAvailable not implemented")
}
func (UnimplementedUpdaterNotificationServiceServer) GetComponentVersion(context.Context, *ComponentVersionRequest) (*ComponentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentVersion not implemented")
}
func (UnimplementedUpdaterNotificationServiceServer) mustEmbedUnimplementedUpdaterNotificationServiceServer() {
}
func (UnimplementedUpdaterNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeUpdaterNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdaterNotificationServiceServer will
// result in compilation errors.
type UnsafeUpdaterNotificationServiceServer interface {
	mustEmbedUnimplementedUpdaterNotificationServiceServer()
}

func RegisterUpdaterNotificationServiceServer(s grpc.ServiceRegistrar, srv UpdaterNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedUpdaterNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpdaterNotificationService_ServiceDesc, srv)
}

func _UpdaterNotificationService_NotifyUpdateAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterNotificationServiceServer).NotifyUpdateAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdaterNotificationService_NotifyUpdateAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterNotificationServiceServer).NotifyUpdateAvailable(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdaterNotificationService_GetComponentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdaterNotificationServiceServer).GetComponentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdaterNotificationService_GetComponentVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdaterNotificationServiceServer).GetComponentVersion(ctx, req.(*ComponentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdaterNotificationService_ServiceDesc is the grpc.ServiceDesc for UpdaterNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdaterNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UpdaterNotificationService",
	HandlerType: (*UpdaterNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyUpdateAvailable",
			Handler:    _UpdaterNotificationService_NotifyUpdateAvailable_Handler,
		},
		{
			MethodName: "GetComponentVersion",
			Handler:    _UpdaterNotificationService_GetComponentVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/cse.proto",
}

const (
	ComponentDiscoveryService_RegisterComponent_FullMethodName = "/v1.ComponentDiscoveryService/RegisterComponent"
)

// ComponentDiscoveryServiceClient is the client API for ComponentDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -----------------------------------------------------------------------------
// ComponentDiscoveryService: 由主应用程序实现，供功能组件在启动时调用
// -----------------------------------------------------------------------------
type ComponentDiscoveryServiceClient interface {
	RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (*RegisterComponentResponse, error)
}

type componentDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentDiscoveryServiceClient(cc grpc.ClientConnInterface) ComponentDiscoveryServiceClient {
	return &componentDiscoveryServiceClient{cc}
}

func (c *componentDiscoveryServiceClient) RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (*RegisterComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterComponentResponse)
	err := c.cc.Invoke(ctx, ComponentDiscoveryService_RegisterComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentDiscoveryServiceServer is the server API for ComponentDiscoveryService service.
// All implementations must embed UnimplementedComponentDiscoveryServiceServer
// for forward compatibility.
//
// -----------------------------------------------------------------------------
// ComponentDiscoveryService: 由主应用程序实现，供功能组件在启动时调用
// -----------------------------------------------------------------------------
type ComponentDiscoveryServiceServer interface {
	RegisterComponent(context.Context, *RegisterComponentRequest) (*RegisterComponentResponse, error)
	mustEmbedUnimplementedComponentDiscoveryServiceServer()
}

// UnimplementedComponentDiscoveryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComponentDiscoveryServiceServer struct{}

func (UnimplementedComponentDiscoveryServiceServer) RegisterComponent(context.Context, *RegisterComponentRequest) (*RegisterComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterComponent not implemented")
}
func (UnimplementedComponentDiscoveryServiceServer) mustEmbedUnimplementedComponentDiscoveryServiceServer() {
}
func (UnimplementedComponentDiscoveryServiceServer) testEmbeddedByValue() {}

// UnsafeComponentDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentDiscoveryServiceServer will
// result in compilation errors.
type UnsafeComponentDiscoveryServiceServer interface {
	mustEmbedUnimplementedComponentDiscoveryServiceServer()
}

func RegisterComponentDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ComponentDiscoveryServiceServer) {
	// If the following call pancis, it indicates UnimplementedComponentDiscoveryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComponentDiscoveryService_ServiceDesc, srv)
}

func _ComponentDiscoveryService_RegisterComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentDiscoveryServiceServer).RegisterComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentDiscoveryService_RegisterComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentDiscoveryServiceServer).RegisterComponent(ctx, req.(*RegisterComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentDiscoveryService_ServiceDesc is the grpc.ServiceDesc for ComponentDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ComponentDiscoveryService",
	HandlerType: (*ComponentDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterComponent",
			Handler:    _ComponentDiscoveryService_RegisterComponent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/cse.proto",
}
